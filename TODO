****
**** This file is now AUTHORITATIVE.
****
**** The older, live file is here:
****           http://ietherpad.com/hMrw0URncq
**** There is a now a version in the git wiki, but I'm still working here:
****           http://github.com/mtnviewmark/barley/wiki/To-do-list
****

[] codes:
    j = Johan, m = Mark
    [x] = x plans on doing this
    [*x] = x is in the middle of doing this (used when it make take awhile
    [+] = it's done, x did it
    [?] = unclear if we should do this
    [-] = won't do or decided not to do

How to use this list:
    - add items as you think of them
    - edit, resort, split, combine, categorize items as you think of it
    - when you planning on doing something, add your initial
        (someone else might still sneak in a do it!)
    - when you've started something, and it will take a while, put a *
        (don't do things with a * without talking to the owner!)
    - when you're done with an item mark with a +, but leave it there
        (feel free to resort)
    - when we make a release, we'll collect all the + items, generate
        release notes, then remove them.
        
=== BARLEY TODO ===

--- Tasks ----

[j] make barely start work outside of ghci
[] make common error and warn functions for command line processing

[+m] write index.hs that gives the user a hello and what to do next
[] updated template.hs that is a basic hello page
    [] what to do
    [] suggested re-edit in haskell comments
    [] reload button
[] create add page step to index.html
[] create addpage.hs page with form w/name and description
[] generate new page from addpage.hs form
[] error page give instructions for what to do
[] scaffold.css should probably be named something better like barley.css
[] Text.Html is forcing us to use prettyHtml instead of renderHtml
    [] either wrap the body contents in a div, and make page return an [Html]
        -- which is icky 'cause then the top html element isn't clear to users
    [] switch to some other HTML library
[] handle errors during copyTree

[] factor common code between index.hs and source.hs into common.hs
[] move source.hs and common.hs into a dev directory

[] need a better term than "run" for the act of invoking code to return a page
    equivalent of "run" in IDEs, but what is it here?
    opens the page in a new browser window

[m] add jQuery to system
    [] ensure serving as correct type

Source Editor
    [+m] request handler option for templates
    [+m] read file and display contents
    [+m] link to open user page in new window
        [] ? user page windows are named with the path so they reuse by page
        [] pop window to the top (in Chrome it opens in a tab and 2nd time
            stays behind
    [+m] open file via file: link
    [+m] editable form
    [+m] save file from form
    [] js to convert text to edit field
       - turn edit area yellow and editable on edit
    [] on edit save, submit in background to a new endpoint
    [] side-by-side view (via iframe)
    [] refresh of either iframe and/or link in separate window
    [+m] add hoogle and hayoo search fields to a new search side bar module
        [] use jQuery to fill search fields with the selection in the source view
    [] validate that file is rational for both reading and writing
    [] compile end point calls into Barley compile
        - returns either OK or ERROR on first line
        - returns warnings or error lines after status line 
    [] source editor can display compile results
    [] source view, on ERROR stays on edit mode
    [] source view, on OK returns to view mode, and opens page in new window

Compilation
    [*j] unload modules after evaluating 'page'
    [] make nu hack robust: check for "\nnu =" before reload
    [] handle reloading with something better than the nu hack... 
        [] ?patch plugins to have better API
        [] ?magic from dons, if he comes up with some
    [] ensure loading modules that import user modules works
    [] editing an included, but not viewed module should trigger recompile
        for modules that use
    [] compilation system tracks mod and compilation times to avoid reloading
        [] clear compilation state user control per file and/or whole
    [] be certain that we can unload w/o breaking (thinking about dangling thunks)
    [] be certain that loading is safe in light of type mismatches
    [] catch error and exceptions during template running
    [] how to handle when the user wants to use some other package?

Project View
    [] shows all files in project w/access to view/edit/run links
    [] rename of files in project view
    [] delete of files in project view
    [] move/copy files in project view

Pristine system
    [] when init'ing a project put a duplicate copy in .pristine
    [] add a restore button that copies from .pristine
    [] diff view that diffs from .pristine 

History
    [] keep a linear view of file versions in a .history dir:
        name the files something like <isodate>-<filepath>.hs
    [] diff through history
    [] integrate with hg or git if available 


--- User Stories ---

User downloads, unpacks, installs (ick)
    barley start
    opens browser
    sees nice intro page

User runs barley w/o a command
    some helpful text is printed out, suggesting commands that could be run
    such as
        barley start playground

User goes intro page
    clicks on Sample page
    sees result
    told to go to file
    opens file
    file contains text on a suggested edit
    user returns to browser
    reloads
    "WOW"

User goes to intro page
    clicks add
    fills out form w/name and description
    system generates file
    goes to file to edit
    reloads
    "WOW"

User reloads a new page
    there is a compilation error
    error page directs them what to do next
    the edits in the file
    there is a reload button

User types url
    do the casing, load the right stuff
    
--- future User Stories ----
There is file of allowed URL to file mappings so that not ALL of the project dir is mapped

When running "barley init", if the current dir is not-empty, it won't overwrite
    there is a "--force" flag to overwrite that

The user can edit .hs source in the web browser
    (probably using http://codemirror.net/ )
    
=== USER STORIES DONE ===
Running barley at the command line:
    barley has three commands: "start", "init", and "run"
    "start" is just "init" if needed followed by "run"
    all three commands take an optional directory to be the project directory
        if none is given, then the project directory defaults to the current directory
    "init" copies the "seed" skeleton project into the project directory
        it creates the project directory if needed
        it fails if the project directory isn't empty
        if the current directory contains a "seed" directory, that is used as the seed
            otherwise, the "seed" directory in the data dir (via cabal install) is used
            if even that is missing, "init" fails and complains
    "run" checks that the project directory is okay - that is, was once "init"'d
        if fails if it wasn't

=== TODO DONE ===
[m] create a playground dir and exclude it's contents (but not it) from the repo
[m] notice that the directory started in is empty and call init-project
[m] if init is called from start, then it shouldn't complain about the non-empty dir
[m] init and start take an optional directory to cd into first
[m] init-project should copy a set of files from data dir
    [m] move Init.hs to Project.hs
    [m] provide init, check, and enter functions
    [m] rename skeleton to seed
    [m] use a .barley-project file to check if project dir is really a project dir
    [m] look for seed in current dir first, before looking at path's from GHC
    [m] remove playground from repo
[m] when providing a project directory on the command line with init, create if it doesn't exist
[m] move template.hs, etc... to data-dir
[m] create scaffold.css in data dir
[m] make index page look like a tutorial with task steps
    [] step 2 points at Template.hs
    [] add sp,e css so it is at least nice to look at
[m] output encoding should be correct: UTF-8
[m] static files are served with incorrect MIME type
[m] add a README file
[m] side bars
[m] broke reloading somehow...


=== NOTES FOR SNAP ===
writeText writes out in UTF-8 but doesn't make that guaruntee in the docs

=== NOTES FOR HTML ===
renderHtml is BROKEN - it puts things inside an extra HTML element!?!?!?


