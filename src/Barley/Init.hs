module Barley.Init (
    init
    ) where

import Control.Monad (when)
import Paths_barley -- generated by cabal
import Prelude hiding (init)
import System.Directory
import System.FilePath

-- | Create a project directory structure.
init :: Bool -> IO ()
init warnIfNotEmpty = nothingHere >>= \b -> if b
    then copyInitialProject
    else when warnIfNotEmpty $
        putStrLn "** This directory is not empty. Not initializing."
  where
    nothingHere = whatsHere >>= return . null . filter notDot
    whatsHere = getCurrentDirectory >>= getDirectoryContents 
    notDot ('.':_) = False
    notDot _ = True

-- | Copy the initial project skeleton to the project directory.
copyInitialProject :: IO ()
copyInitialProject = do
    fromDir <- getDataDir >>= return . (</> "seed")
    toDir <- getCurrentDirectory
    putStrLn "Creating default project files..."
    copyTree fromDir toDir
    putStrLn "...done."

-- | Copy a directory tree from one place to another. The destination, or
-- the subtrees needn't exist. If they do, existing files with the same names
-- as the source will be overwritten. Other files will be left alone.
copyTree :: FilePath -> FilePath -> IO ()
copyTree from to = pick
    [(doesFileExist,        doFile),
     (doesDirectoryExist,   doDir)]
  where
    pick ((test, act):rest) = do
        bool <- test from
        if bool
            then putStrLn ("..." ++ to) >> act
            else pick rest
    pick [] =
        putStrLn $ "** Skipping funny thing in skeleton tree: " ++ from

    doFile = copyFile from to 
    doDir = do
        createDirectoryIfMissing False to
        getDirectoryContents from >>= mapM_ dive . filter notSpecial
        
    dive item = copyTree (from </> item) (to </> item)
    notSpecial item = item /= "." && item /= ".."
